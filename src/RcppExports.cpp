// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// euclid
double euclid(NumericVector a, NumericVector b);
RcppExport SEXP _ggrepel_euclid(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(euclid(a, b));
    return rcpp_result_gen;
END_RCPP
}
// centroid
NumericVector centroid(NumericVector b, double hjust, double vjust);
RcppExport SEXP _ggrepel_centroid(SEXP bSEXP, SEXP hjustSEXP, SEXP vjustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type hjust(hjustSEXP);
    Rcpp::traits::input_parameter< double >::type vjust(vjustSEXP);
    rcpp_result_gen = Rcpp::wrap(centroid(b, hjust, vjust));
    return rcpp_result_gen;
END_RCPP
}
// intersect_line_rectangle
NumericVector intersect_line_rectangle(NumericVector p1, NumericVector p2, NumericVector b);
RcppExport SEXP _ggrepel_intersect_line_rectangle(SEXP p1SEXP, SEXP p2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(intersect_line_rectangle(p1, p2, b));
    return rcpp_result_gen;
END_RCPP
}
// select_line_connection
NumericVector select_line_connection(NumericVector p1, NumericVector b);
RcppExport SEXP _ggrepel_select_line_connection(SEXP p1SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(select_line_connection(p1, b));
    return rcpp_result_gen;
END_RCPP
}
// approximately_equal
bool approximately_equal(double x1, double x2);
RcppExport SEXP _ggrepel_approximately_equal(SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(approximately_equal(x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// repel_boxes
DataFrame repel_boxes(NumericMatrix data_points, double point_padding_x, double point_padding_y, NumericMatrix boxes, NumericVector xlim, NumericVector ylim, NumericVector hjust, NumericVector vjust, double force, int maxiter, std::string direction);
RcppExport SEXP _ggrepel_repel_boxes(SEXP data_pointsSEXP, SEXP point_padding_xSEXP, SEXP point_padding_ySEXP, SEXP boxesSEXP, SEXP xlimSEXP, SEXP ylimSEXP, SEXP hjustSEXP, SEXP vjustSEXP, SEXP forceSEXP, SEXP maxiterSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data_points(data_pointsSEXP);
    Rcpp::traits::input_parameter< double >::type point_padding_x(point_padding_xSEXP);
    Rcpp::traits::input_parameter< double >::type point_padding_y(point_padding_ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type boxes(boxesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xlim(xlimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ylim(ylimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hjust(hjustSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vjust(vjustSEXP);
    Rcpp::traits::input_parameter< double >::type force(forceSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< std::string >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(repel_boxes(data_points, point_padding_x, point_padding_y, boxes, xlim, ylim, hjust, vjust, force, maxiter, direction));
    return rcpp_result_gen;
END_RCPP
}
// wordcloud_boxes
DataFrame wordcloud_boxes(NumericMatrix data_points, double point_padding_x, double point_padding_y, NumericMatrix boxes, NumericVector xlim, NumericVector ylim, double rstep, double tstep, int maxiter);
RcppExport SEXP _ggrepel_wordcloud_boxes(SEXP data_pointsSEXP, SEXP point_padding_xSEXP, SEXP point_padding_ySEXP, SEXP boxesSEXP, SEXP xlimSEXP, SEXP ylimSEXP, SEXP rstepSEXP, SEXP tstepSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data_points(data_pointsSEXP);
    Rcpp::traits::input_parameter< double >::type point_padding_x(point_padding_xSEXP);
    Rcpp::traits::input_parameter< double >::type point_padding_y(point_padding_ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type boxes(boxesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xlim(xlimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ylim(ylimSEXP);
    Rcpp::traits::input_parameter< double >::type rstep(rstepSEXP);
    Rcpp::traits::input_parameter< double >::type tstep(tstepSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(wordcloud_boxes(data_points, point_padding_x, point_padding_y, boxes, xlim, ylim, rstep, tstep, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggrepel_euclid", (DL_FUNC) &_ggrepel_euclid, 2},
    {"_ggrepel_centroid", (DL_FUNC) &_ggrepel_centroid, 3},
    {"_ggrepel_intersect_line_rectangle", (DL_FUNC) &_ggrepel_intersect_line_rectangle, 3},
    {"_ggrepel_select_line_connection", (DL_FUNC) &_ggrepel_select_line_connection, 2},
    {"_ggrepel_approximately_equal", (DL_FUNC) &_ggrepel_approximately_equal, 2},
    {"_ggrepel_repel_boxes", (DL_FUNC) &_ggrepel_repel_boxes, 11},
    {"_ggrepel_wordcloud_boxes", (DL_FUNC) &_ggrepel_wordcloud_boxes, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggrepel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
